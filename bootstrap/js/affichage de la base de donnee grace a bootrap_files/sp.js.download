// Create a Stripe client.
var stripe = Stripe('pk_test_9AUfPkJCrPTMGCW6EKydnlMZ');

// Create an instance of Elements.
var elements = stripe.elements();

// Floating labels
var inputs = document.querySelectorAll('.row .input');
Array.prototype.forEach.call(inputs, function(input) {
    input.addEventListener('focus', function() {
        input.classList.add('focused');
    });
    input.addEventListener('blur', function() {
        input.classList.remove('focused');
    });
    input.addEventListener('keyup', function() {
        if (input.value.length === 0) {
            input.classList.add('empty');
        } else {
            input.classList.remove('empty');
        }
    });
});


// Custom styling can be passed to options when creating an Element.
// (Note that this demo uses a wider set of styles than the guide below.)
var style = {
    base: {
        color: '#32325d',
        fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
        fontSmoothing: 'antialiased',
        fontSize: '16px',
        '::placeholder': {
            color: '#aab7c4'
        }
    },
    invalid: {
        color: '#fa755a',
        iconColor: '#fa755a'
    }
};

var elementStyles = {
    base: {
        color: '#32325D',
        fontWeight: 500,
        fontFamily: 'Source Code Pro, Consolas, Menlo, monospace',
        fontSize: '16px',
        fontSmoothing: 'antialiased',

        '::placeholder': {
            color: '#CFD7DF',
        },
        ':-webkit-autofill': {
            color: '#e39f48',
        },
    },
    invalid: {
        color: '#E25950',

        '::placeholder': {
            color: '#FFCCA5',
        },
    },
};

var elementClasses = {
    focus: 'focused',
    empty: 'empty',
    invalid: 'invalid',
};

// Style du bouton avec Bootstrap
document.querySelector('#payment-form button').classList = 'btn btn-primary btn-block mt-4';

// La carte + expiration + CVC
//var card = elements.create('card', {style: style});
//card.mount('#card-element');

var cardNumber = elements.create('cardNumber', {
    style: elementStyles,
    classes: elementClasses,
  });
cardNumber.mount('#cardNumber');

// Expiration
var cardExpiry = elements.create('cardExpiry', {style: style});
cardExpiry.mount('#cardExpire');

// CVC
var cardCvc = elements.create('cardCvc', {style: style});
cardCvc.mount('#cardCVC');


// Handle real-time validation errors from the card Element.
cardNumber.addEventListener('change', function(event) {
    var displayError = document.getElementById('card-errors');
    if (event.error) {
        displayError.textContent = event.error.message;
    } else {
        displayError.textContent = '';
    }
});

// Handle form submission.
var form = document.getElementById('payment-form');
form.addEventListener('submit', function(event) {
    event.preventDefault();

    stripe.createToken(cardNumber).then(function(result) {
        if (result.error) {
            // Inform the user if there was an error.
            var errorElement = document.getElementById('card-errors');
            errorElement.textContent = result.error.message;
        } else {
            // Send the token to your server.
            stripeTokenHandler(result.token);
        }
    });
});

// Submit the form with the token ID.
function stripeTokenHandler(token) {
    // Insert the token ID into the form so it gets submitted to the server
    var form = document.getElementById('payment-form');
    var hiddenInput = document.createElement('input');
    hiddenInput.setAttribute('type', 'hidden');
    hiddenInput.setAttribute('name', 'stripeToken');
    hiddenInput.setAttribute('value', token.id);
    form.appendChild(hiddenInput);

    // Submit the form
    form.submit();
}